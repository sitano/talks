Go is awesome
Jule, 2016
Tags: go, awesome, shit

Ivan Prisyazhnyy
Backend developer
OSS advocate
@JohnKoepi

* History

Go is an open source programming language created
at Google in 2007 by Robert Griesemer, Rob Pike,
Ken Thompson, Ian Lance Taylor and Russ Cox.

.link http://golang.org

* Retrospective

- 1947 - Bell Labs, invention of transistor
- 1954 - Fortran
- 1960 - Multics
- 1971 - C (Ken Thompson, 1989 - ANSI C)
- 1983 - C++ (Bjarne Stroustrup, 1998 ISO/IEC)
- 1995 - Java (James Gosling, 6 years 6 -> 7)
- 2007 - Go (5 years to production ready release)

* History

5 years to first stable release.
3 more years of maturity, ~0 changes in syntax.

- go1.7 is coming this year
- go1.6 (released 2016/02/17)
- go1.5 (released 2015/08/19)
- go1.4 (released 2014/12/10)
- go1.3 (released 2014/06/18)
- go1.2 (released 2013/12/01)
- go1.1 (released 2013/05/13)
- go1 (released 2012/03/28)

* Todays

Hundreds of projects. Thousands of Go programmers. Millions of lines of Go code.

- Google, for many projects, notably including download server dl.google.com
- Netflix, for two portions of their server architecture
- Docker, Kubernetes
- Dropbox, migrated some of their critical components from Python to Go
- CloudFlare, delta-coding proxy Railgun, dist DNS, cryptography, logging, stream processing, etc.
- SoundCloud, for "dozens of systems"
- CoreOS, a Linux-based operating system that utilizes Docker containers.
- Couchbase, Query and Indexing services within the Couchbase Server
- Uber, for handling high volumes of geofence-based queries.

* Every big company uses Go

.link http://golang.org/wiki/GoUsers

Aerospike, BBC Worldwide, Bitbucket, Booking.com, Core OS, Datadog, Digital Ocean, Docker, Dropbox, Facebook, Getty Images, GitHub, GOV.UK, Heroku, IBM, Intel, InfluxDB, Iron.io, Kubernetes, Medium, MongoDB, Mozilla services, Netflix, New York Times, pool.ntp.org, Rackspace, Shutterfly, SmugMug, SoundCloud, SpaceX, Square, Stack Exchange, Thomson Reuters Eikon, Tumblr, Twitch, Twitter, Uber, VMWare ...

* Getting excited

.link https://github.com/avelino/awesome-go awesome-go at github

- 135000 projects on github (2.5M - js, 2M - java, 500k - C/C++)
- 25000 authors
- clouds: docker, rkt, kubernetes, drone
- distsys: consul, etcd, gokit, gorpc, grpc, glow
- os: coreos
- db: influxdb, cockroarch, prometheus, dgraph, bolt
- p2p: lantern
- web: http/2, websockets, gin, iris

* Trending just now

Trending in open source

.link https://github.com/trending/go

among c, c++, java, js, python and scala

* PHP will die

.link http://commandcenter.blogspot.ru/2012/06/less-is-exponentially-more.html Less is exponentially more

Rob Pike at SF 2012

Although we expected C++ programmers
to see Go as an alternative, instead most Go programmers
come from languages like Python and Ruby.
Very few come from C++.

* Node.JS will not save you

"Go: 90% Perfect, 100% of the time" -bradfitz, 2014

.image go-awesome/funfast.svg 500 _

# Brad Fitzpatrick, GoCon Tokyo, May 2014

* Authors are gods

- Ken Thompson - unix hacker, pre C lang
- Rob Pike - limbo lang, unix and plan 9
- Robert Griesemer - Java HotSpot VM at Sun

* Original problems

- Google Scale
- Multithreading is hard
- Distributed systems are hard
.link https://aphyr.com/ Aphyr - the CAP's superman, say hi to Jepsen
- Long compilation times (i.e. 45 minutes)
- C++ hard, new standards - more undef behavior, more features
.link http://commandcenter.blogspot.ru/2012/06/less-is-exponentially-more.html Rob, on how its all started

* So, Why Go?

Go is an answer to problems of scale at Google.

.image go-awesome/datacenter.jpg 500 _

* Google's like System Scale

- designed to scale to 10⁶⁺ machines
- everyday jobs run on 1000s of machines
- jobs coordinate, interact with others in the system
- lots going on at once

Solution: great support for concurrency

.image go-awesome/gophercomplex6.jpg

* A Second Google's Problem: Engineering Scale

In 2011:

- 5000+ developers across 40+ offices
- 20+ changes per minute
- 50% of code base changes every month
- 50 million test cases executed per day
- single code tree

Solution: design the language for large code bases

* Our scale

Awesome Go for our scale...

.image go-awesome/our-scale.jpg 500 _

* But Go is good for everything on a backend

* The Language

- C family (imperative, braces) compiled
- Statically typed
- Garbage collected
- Memory safe (nil references, runtime bounds checks)
- Built-in concurrency
- Explicit errors
- Interfaces, Methods, Structs
- Reflection
- Strong tooling

* Go differs from Java in several ways

Fast, efficient for computers:

- Programs compile to machine code.  There's no VM.
- Control over memory layout, fewer indirections

Fun, fast for humans:

- Simple, concise syntax
- Statically linked binaries
- Function values and lexical closures
- Built-in strings (UTF-8)
- Built-in generic maps and arrays/slices
- Built-in concurrency

* Go intentionally leaves out many features

- No classes
- No inheritance
- No constructors
- No `final`
- No exceptions
- No annotations
- No user-defined generics

* Why does Go leave out those features?

Clarity is critical.

When reading code, it should be clear what the program will do.

When writing code, it should be clear how to make the program do what you want.

Sometimes this means writing out a loop instead of invoking an obscure function.

(Don't DRY out.)

For more background on design:

- [[http://commandcenter.blogspot.com/2012/06/less-is-exponentially-more.html][Less is exponentially more (Pike, 2012)]]
- [[http://talks.golang.org/2012/splash.article][Go at Google: Language Design in the Service of Software Engineering (Pike, 2012)]]

* Code examples

* Go looks familiar

Hello, world!

.play go-awesome/hello/hello.go

* Hello, web server

.play go-awesome/hello/server.go

Types follow names in declarations.
Exported names are Capitalized.  Unexported names are not.

# ... and many more from go4cpp

* Communicating Sequential Processes (Hoare, 1978)

Concurrent programs are structured as independent processes that
execute sequentially and communicate by passing messages.

Sequential execution is easy to understand.  Async callbacks are not.

*Go*primitives:* goroutines, channels, and the `select` statement.

* Goroutines

Goroutines are like lightweight threads.

They start with tiny stacks and resize as needed.

Go programs can have hundreds of thousands of them.

Start a goroutine using the `go` statement:

  go f(args)

The Go runtime schedules goroutines onto OS threads.

Blocked goroutines don't use a thread.

* Channels

Channels provide communication between goroutines.

  c := make(chan string)

  // goroutine 1
  c <- "hello!"

  // goroutine 2
  s := <-c
  fmt.Println(s) // "hello!"

* Select

A `select` statement blocks until communication can proceed.

  select {
  case x := <-in:
    fmt.Println("received", x)
  case out <- v:
    fmt.Println("sent", v)
  
}

Only the selected case runs.

* Example: Google Search (backend)

Q: What does Google search do?

A: Given a query, return a page of search results (and some ads).

Q: How do we get the search results?

A: Send the query to Web search, Image search, YouTube, Maps, News, etc., then mix the results.

How do we implement this?

* Google Search: A fake framework

We can simulate a back end search with a random timeout up to 100ms.

.code go-awesome/google/fake.go /START2/,/STOP2/

* Google Search: Test the framework

.play go-awesome/google-serial.go /func.main/,/}/ HLsearch

* Google Search (serial)

The `Search` function takes a query and returns a slice of `Results`.

Search invokes the Web, Image, and Video searches serially, then constructs the `results` slice.

.code go-awesome/google/serial.go /func Search/,/^}/
.play go-awesome/google-serial.go /google.Search/

* Google Search (parallel)

Run the Web, Image, and Video searches concurrently, and wait for all results.

The `func` literals are closures over `query` and `c`.

.code go-awesome/google/parallel.go /func Search/,/^}/
.play go-awesome/google-parallel.go /google.Search/

* Google Search (timeout)

Don't wait for slow servers.

.code go-awesome/google/timeout.go /func Search/,/STOP/
.play go-awesome/google-timeout.go /google.Search/ HLsearch

* Avoid timeout

Q: How do we avoid discarding results from slow servers?

A: Replicate the servers.  Send requests to multiple replicas, and use the first response.

.code go-awesome/google/first.go /func First/,/^}/

* Using the First function

.play go-awesome/first.go /func main/,/^}/

* Google Search (replicated)

Reduce tail latency using replicated back ends.

.code go-awesome/google/first.go /START/,/STOP/
.play go-awesome/google-replicated.go /google.Search/

Go functions have simple, synchronous signatures.
The use of concurrency is encapsulated.

* What just happened?

In just a few simple transformations we used Go's concurrency primitives to convert a

- slow
- sequential
- failure-sensitive

program into one that is

- fast
- concurrent
- replicated
- robust.

No locks. No condition variables. No futures. No callbacks.

* Test framework built-in

- Opinionated
- Unit tests
- MT Performance benchmarks
- Many more with mocking, bdd, ...

* Compiler

- native code
- a lot of platforms out of the box
- cross compilation
- self compiled since 1.5
- blazingly fast
- smaller binaries
- escape analysis
- [[https://docs.google.com/document/d/1szwabPJJc4J-igUZU4ZKprOrNRNJug2JPD8OYi3i1K0/edit#heading=h.ywtmh4qacfis][new SSA backend]]

* Garbage Collector in Go 1.6

At [[http://www.infoq.com/presentations/go-gc-performance][QCon SF in November Rick Hudson]] gave an updated presentation which showed this comparison of Go 1.5 to the upcoming Go 1.6

.image go-awesome/gc56.png 400 _

_Yes,_that_is_gigabytes_on_the_X_axis_

* Garbage Collector on tip

Right now it's even better!

.image go-awesome/gcgotip.png _ 600

* Interop

bind with plain asm

	TEXT ·GetG(SB),NOSPLIT,$0-8
	get_tls(CX)
	MOVQ g(CX), AX
	MOVQ AX, gp+0(FP)
	RET

* Interop

bind with plain C with cgo

	n, err := C.sqrt(-1)

* Interop

bind with inline C

	// #cgo CFLAGS: -DPNG_DEBUG=1
	// #cgo amd64 386 CFLAGS: -DX86=1
	// #cgo LDFLAGS: -lpng
	// #include <png.h>
	import "C"

* Interop

- `cgo` works complex
- syscalls are plain C calls as well
- there are safety guarantees

In short:

- Go can pass a pointer to C
- the referenced memory can't have pointers to Go allocated memory
- C can't keep pointers to the memory after the call returns

.link https://golang.org/cmd/cgo/

* More on safety

- race conditions checks
- deadlocks checks
- map, slices unsynced access checks
- channels are safe
- unsafe

* You don't need a debugger

- GDB is not there yet
- Delve, and some more
- use printf("%+v\n", ...)
- build-in profilers
- stack unwinding

* Go is designed for tooling

Go tools meet you where you are.  There's no one "Go IDE".

- IDE & editor integration: Eclipse, IntelliJ, VisualStudio, SublimeText, emacs, vim, ...
- [[http://play.golang.org][play.golang.org]]: online playground
- `go get`: dependency management + vendoring
- `gofmt`: automatic formatting
- `govet`: static code analysis
- `goimports`: automatic updates of package imports
- `gocode`: automatic completion
- the `go` tool: automatic fetch & build
- `guru`: static analysis, bug finding, code navigation
- [[http://godoc.org][godoc.org]]: open source package index and docs

* The community

Code of Conduct announced on November 24th 2015

Go meetups:

- [[http://go-meetups.appspot.com]]

Women Who Go - 7 chapters already!

- [[http://www.womenwhogo.org]]

* Conferences:

- [[http://gophergala.com/][GopherGala]] Jan 22-24th (judging proposals now)
- [[https://fosdem.org/2016/][FOSDEM]] Right here, right now. Hello!
- [[http://gophercon.ae][GopherCon Dubai]], Feb 23rd
- [[http://www.gophercon.in/][GopherCon India]], Feb 19-20th
- [[https://gophercon.com/][Gophercon Denver]], Jul 11-13th
- [[http://2016.dotgo.eu/][dotGo]], Nov 9th

* Podcasts

- [[https://radio-t.com/][radio-t]]
- [[http://devzen.ru/][devzen]]
- [[https://golangshow.com/][golangshow]]

check #slack channels

* Go proverbs

Don't communicate by sharing memory, share memory by communicating.
Concurrency is not parallelism.
Channels orchestrate; mutexes serialize.
The bigger the interface, the weaker the abstraction.
Make the zero value useful.
A little copying is better than a little dependency.
With the unsafe package there are no guarantees.
Clear is better than clever.
Reflection is never clear.
Errors are values.
Don't just check errors, handle them gracefully.
Design the architecture, name the components, document the details.
Documentation is for users.
Don't panic.

.link https://go-proverbs.github.io/ from @rob_pikes's inspiring talk at Gopherfest SV 2015.

: Proverbs from [@rob_pike's](https://twitter.com/rob_pike)
: inspiring [talk at Gopherfest SV 2015 (video)](https://www.youtube.com/watch?v=PAAkCSZUG1c).

* Where to Go next

Take the Go Tour online.

.link http://tour.golang.org

Lots more material.

.link http://golang.org/wiki/Learn

Great community.

.link http://golang.org/project
