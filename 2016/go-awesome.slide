Go is awesome
Jule, 2016
Tags: go, awesome, shit

Ivan Prisyazhnyy
Backend developer
OSS advocate
@JohnKoepi

* History

Go is an open source programming language created at Google in 2007
by Robert Griesemer, Rob Pike, and Ken Thompson.

.link http://golang.org

* Retrospective

- 1947 - Bell Labs, invention of transistor
- 1954 - Fortran
- 1960 - Multics
- 1971 - C (Ken Thompson, 1989 - ANSI C)
- 1983 - C++ (Bjarne Stroustrup, 1998 ISO/IEC)
- 1995 - Java (James Gosling, 6 years 6 -> 7)
- 2007 - Go (5 years to production ready release)

* History

5 years to first stable release.
3 more years of maturity, ~0 changes in syntax.

- go1.7 is coming this year
- go1.6 (released 2016/02/17)
- go1.5 (released 2015/08/19)
- go1.4 (released 2014/12/10)
- go1.3 (released 2014/06/18)
- go1.2 (released 2013/12/01)
- go1.1 (released 2013/05/13)
- go1 (released 2012/03/28)

* Todays

Hundreds of projects. Thousands of Go programmers. Millions of lines of Go code.

- Google, for many projects, notably including download server dl.google.com
- Netflix, for two portions of their server architecture
- Docker, Kubernetes
- Dropbox, migrated some of their critical components from Python to Go
- CloudFlare, delta-coding proxy Railgun, dist DNS, cryptography, logging, stream processing, etc.
- SoundCloud, for "dozens of systems"
- CoreOS, a Linux-based operating system that utilizes Docker containers.
- Couchbase, Query and Indexing services within the Couchbase Server
- Uber, for handling high volumes of geofence-based queries.

* Every big company uses Go

.link http://golang.org/wiki/GoUsers

Aerospike, BBC Worldwide, Bitbucket, Booking.com, Core OS, Datadog, Digital Ocean, Docker, Dropbox, Facebook, Getty Images, GitHub, GOV.UK, Heroku, IBM, Intel, InfluxDB, Iron.io, Kubernetes, Medium, MongoDB, Mozilla services, Netflix, New York Times, pool.ntp.org, Rackspace, Shutterfly, SmugMug, SoundCloud, SpaceX, Square, Stack Exchange, Thomson Reuters Eikon, Tumblr, Twitch, Twitter, Uber, VMWare ...

* Interesting OSS projects

.link https://github.com/search?utf8=%E2%9C%93&q=language%3AGo&type=Repositories&ref=advsearch&l=Go&l= Go at GitHub

- 135000 projects on github (2.5M - js, 2M - java, 500k - C/C++)
- 25000 authors
- clouds: docker, rkt, kubernetes, drone
- distsys: consul, etcd
- os: coreos
- db: influxdb, cockroarch, prometheus, dgraph
- p2p: lantern
- web: gin

* Trending just now

Trending in open source

.link https://github.com/trending/go

among c, c++, java, js, python and scala

* PHP will die

.link http://commandcenter.blogspot.ru/2012/06/less-is-exponentially-more.html Less is exponentially more

Rob Pike at SF 2012

Although we expected C++ programmers
to see Go as an alternative, instead most Go programmers
come from languages like Python and Ruby.
Very few come from C++.

* Authors are gods

- Ken Thompson - unix hacker, pre C lang
- Rob Pike - limbo lang, unix and plan 9
- Robert Griesemer - Java HotSpot VM at Sun

* Original problems

- Google Scale
- Multithreading is hard
- Distributed systems are hard
.link https://aphyr.com/ Aphyr - the CAP's superman, say hi to Jepsen
- Long compilation times (i.e. 45 minutes)
- C++ hard, new standards - more undef behavior, more features
.link http://commandcenter.blogspot.ru/2012/06/less-is-exponentially-more.html Rob, on how its all started

* So, Why Go?

Go is an answer to problems of scale at Google.

.image go-awesome/datacenter.jpg 500 _

* Google's like System Scale

- designed to scale to 10⁶⁺ machines
- everyday jobs run on 1000s of machines
- jobs coordinate, interact with others in the system
- lots going on at once

Solution: great support for concurrency

.image go-awesome/gophercomplex6.jpg

* A Second Google's Problem: Engineering Scale

In 2011:

- 5000+ developers across 40+ offices
- 20+ changes per minute
- 50% of code base changes every month
- 50 million test cases executed per day
- single code tree

Solution: design the language for large code bases

* Our scale

Awesome Go for our scale...

.image go-awesome/our-scale.jpg 500 _

* The Language

- C family (imperative, braces)
- Statically typed
- Garbage collected
- Memory safe (nil references, runtime bounds checks)
- Built-in concurrency
- Explicit errors
- Interfaces, Methods, Structs
- Reflection
- Strong tooling

* Go differs from Java in several ways

Fast, efficient for computers:

- Programs compile to machine code.  There's no VM.
- Control over memory layout, fewer indirections

Fun, fast for humans:

- Simple, concise syntax
- Statically linked binaries
- Function values and lexical closures
- Built-in strings (UTF-8)
- Built-in generic maps and arrays/slices
- Built-in concurrency

* Go intentionally leaves out many features

- No classes
- No inheritance
- No constructors
- No `final`
- No exceptions
- No annotations
- No user-defined generics

* Why does Go leave out those features?

Clarity is critical.

When reading code, it should be clear what the program will do.

When writing code, it should be clear how to make the program do what you want.

Sometimes this means writing out a loop instead of invoking an obscure function.

(Don't DRY out.)

For more background on design:

- [[http://commandcenter.blogspot.com/2012/06/less-is-exponentially-more.html][Less is exponentially more (Pike, 2012)]]
- [[http://talks.golang.org/2012/splash.article][Go at Google: Language Design in the Service of Software Engineering (Pike, 2012)]]

* Features

- regular syntax (don't need a symbol table to parse)
- garbage collection (only)
- no header files
- explicit dependencies
- no circular dependencies
- constants are just numbers
- int and int32 are distinct types
- letter case sets visibility

* Features

- methods for any type (no classes)
- no subtype inheritance (no subclasses)
- package-level initialization and well-defined order of initialization
- files compiled together in a package
- package-level globals presented in any order
- no arithmetic conversions (constants help)
- interfaces are implicit (no "implements" declaration)
- embedding (no promotion to superclass)

* Features

- methods are declared as functions (no special location)
- methods are just functions
- interfaces are just methods (no data)
- methods match by name only (not by type)
- no constructors or destructors
- postincrement and postdecrement are statements, not expressions
- no preincrement or predecrement
- assignment is not an expression
- evaluation order defined in assignment, function call (no "sequence point")

* Features

- no pointer arithmetic
- memory is always zeroed
- legal to take address of local variable
- no "this" in methods
- segmented stacks
- no const or other type annotations
- no templates
- no exceptions
- builtin string, slice, map
- array bounds checking

* Code examples

* Go looks familiar

Hello, world!

.play go-awesome/hello/hello.go

* Hello, web server

.play go-awesome/hello/server.go

Types follow names in declarations.
Exported names are Capitalized.  Unexported names are not.

* Test framework built-in

- Opinionated
- Unit tests
- MT Performance benchmarks
- Many more with mocking, bdd, ...

* You don't need a debugger

- GDB is not there yet
- Delve, and some more
- use printf("%+v\n", ...)
- build-in profilers
- stack unwinding

* Go is designed for tooling

Go tools meet you where you are.  There's no one "Go IDE".

- IDE & editor integration: Eclipse, IntelliJ, VisualStudio, SublimeText, emacs, vim, ...
- [[http://play.golang.org][play.golang.org]]: online playground
- `go get`: dependency management + vendoring
- `gofmt`: automatic formatting
- `govet`: static code analysis
- `goimports`: automatic updates of package imports
- `gocode`: automatic completion
- the `go` tool: automatic fetch & build
- `guru`: static analysis, bug finding, code navigation
- [[http://godoc.org][godoc.org]]: open source package index and docs

* Go proverbs

Don't communicate by sharing memory, share memory by communicating.
Concurrency is not parallelism.
Channels orchestrate; mutexes serialize.
The bigger the interface, the weaker the abstraction.
Make the zero value useful.
A little copying is better than a little dependency.
With the unsafe package there are no guarantees.
Clear is better than clever.
Reflection is never clear.
Errors are values.
Don't just check errors, handle them gracefully.
Design the architecture, name the components, document the details.
Documentation is for users.
Don't panic.

.link https://go-proverbs.github.io/ from @rob_pikes's inspiring talk at Gopherfest SV 2015.

: Proverbs from [@rob_pike's](https://twitter.com/rob_pike)
: inspiring [talk at Gopherfest SV 2015 (video)](https://www.youtube.com/watch?v=PAAkCSZUG1c).

* Where to Go next

Take the Go Tour online.

.link http://tour.golang.org

Lots more material.

.link http://golang.org/wiki/Learn

Great community.

.link http://golang.org/project
