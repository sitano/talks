Опыт применения Go для решения инфраструктурных задач
Октябрь, 2016
Tags: go, awesome, shit

Присяжный Иван
Инженер задник
Линух, Открытые программы, Дист. сис.
john.koepi@gmail.com
@JohnKoepi

* Кто я?

- Облака
- Сервера
- Распределенные системы
- Linux, Open Source

* Опыт

- Инженер по облачной инфраструктуре в Exit Games - 2 года
- Технический лидер на проекте MusicWars - 6 лет
- Веб разработчик .NET - 2 года
- и много лет до этого C, C++, PHP, JavaScript, .NET, ...

: http://talks.godoc.org/github.com/sitano/talks/2016/go-intro.slide

* Проблема

* Поиск

* Решение

* Итог

.background go-intro/goraster.png

* Что есть Go?

Go это компилируемый многопоточный язык программирования,
разработанный компанией Google.

Первоначальная разработка Go началась в сентябре 2007 года,
а его непосредственным проектированием занимались
Роберт Гризмер, Роб Пайк и Кен Томпсон[4],

.image go-intro/gomate.png
.link http://golang.org

* C++ и Java без проблем

* Уже 4 года я большой

* Пример кода 1

	r := gin.Default()

	r.GET("/ping", func(c *gin.Context) {
		c.JSON(200, gin.H{
			"message": "pong",
		})
	})

	r.Run()

* Пример кода 2

	bot, err := telebot.NewBot(os.Getenv("BOT_TOKEN"))
	if err != nil {
		log.Fatalln(err)
	}

	messages := make(chan telebot.Message)
	bot.Listen(messages, 1*time.Second)

	for message := range messages {
		if message.Text == "/hi" {
			bot.SendMessage(message.Chat, "Hello, "+message.Sender.FirstName+"!", nil)
		}
	}

* Пример кода 3

	Transaction.Template spending = new Transaction.Builder()
		.addAction(new Transaction.Action.SpendFromAccount()
			.setAccountAlias("alice")
			.setAssetAlias("gold")
			.setAmount(10))
		.addAction(new Transaction.Action.ControlWithAccount()
			.setAccountAlias("bob")
			.setAssetAlias("gold")
			.setAmount(10))
		.build(client);

	Transaction.submit(client, HsmSigner.sign(spending));

* Бизнес needs costs reduction

* Компании

mail.ru, Lazada Rus, Mirantis, Bell, Epam, Luxsoft, Acronis, …

Google, Netflix, Docker, Kubernetes, Dropbox, CloudFlare, SoundCloud, CoreOS, Couchbase, Uber …

.link https://kaliningrad.hh.ru/search/vacancy?text=go+language&clusters=true&enable_snippets=true&page=1 source hh.ru

* Awesome Go

* Интересные проекты

- Docker
- Kubernetes
- netstack
- chaosmonkey
- chain
- rclone
- bgp

* 1С на Go???

.image go-intro/gomate2.png

* Nope

.background go-intro/no-tits.jpg

* Микросервисы

* Go для облаков, как Java для бигдаты

* Несовершенный Go, но очень хороший

	> So Go is simply a throwback to pre-80s programming languages, and a perfect illustration of the frustrations that led to the development and extension of the C++/Java/C# programming languages. 

.link http://talks.godoc.org/github.com/davecheney/presentations/gopher-puzzlers.slide Gopher Puzzlers - How well do you know your language? from 11 October 2016 by Dave Cheney
.link http://talks.godoc.org/github.com/davecheney/presentations/writing-high-performance-go.slide Writing High Performance Go - GopherChina from 17 April 2016 by Dave Cheney
.link http://talks.godoc.org/github.com/davecheney/presentations/seven.slide Seven ways to profile a Go program - GoBridge remote meetup from 22 September 2016 by Dave Cheney

* Generics

	type NewType []int
	type NewStruct struct {}

> No way

* Dig a little deeper...

[[https://docs.google.com/document/d/1vrAy9gMpMoS3uaVphB32uVXX4pi-HnNjkMEgyAHX4N4/edit][Summary of Go Generics Discussions]]

And proceeding to YCombinator:

[[https://news.ycombinator.com/item?id=8756683][YCombinator discussion on the summary]]

And [[https://news.ycombinator.com/item?id=8757448][`Waps` commenting]]...

	> Go has generics. For arrays, slices, channels, maps, and some "standard" library functions. Go has generic functions.

So you can write

	var X map[typeA]typeB

> If you look at the compiler source, the type system has generics, to a large extent. It's simply not accessible to normal programmers, instead only allowed for golang's authors.

* Does Go have polymorphic functions?

Normally not, but…

And Waps commenting...

	> Go has polymorphic functions : append, make, copy …

* Type parameters?

	func make(Type, size IntegerType) Type
		func new(Type) *Type
	...

> Golang even has functions with type parameters. Make and new being the obvious examples. Again, this is present in the type system (not just there, also in reflect, things like printf, ...). It's simply not made accessible to us lowly go programmers.

* And, as if this is not bad enough…

> Go cheats the type system in thoroughly non-obvious ways to get more C-like behaviours that obviously do not improve safety or programmer productivity.

* Field attributes have loosy types too

	type T struct {
		V int `json: “v”`
	}

* Arrays and Slices

Arrays are values. Slices are views.

	a := [2]string{"a", "b"}
	b := []string{"a", "b"}
	c := [...]string{"a", "b"}
	d := make([]byte, 2, 2)

Yeah, there is a difference. What is what???

* Deep copy copy(src, dst)

Каков результат?

	arr := []int{1, 2, 3}
	tmp := []int{}
	copy(tmp, arr)
	fmt.Println(tmp)
	fmt.Println(arr)

[[http://stackoverflow.com/questions/30182538/why-can-not-i-copy-a-slice-with-copy-in-golang][The builtin copy(dst, src) copies min(len(dst), len(src)) elements]]. WAT???

* Map syntax

	Map returns
	var m map[int]string
	for k, v := range m {}
	X := m[“key”]
	If _, ok := m[“key”] {}

И над map нельзя сделать cap(m)!

А в nil map нельзя писать, тогда как в пустой slice можно.

* Currently goroutines are only preemptible at function call points.

How bad it is?

	> it's possible to write a tight loop (e.g., a numerical kernel or a spin on an atomic) with no calls or allocation that arbitrarily delays preemption.
	> This can result in arbitrarily long pause times as the GC waits for all goroutines to stop.
	> In unusual situations, this can even lead to deadlock when trying to stop the world.

* No thread monitors

- No control
- No enlisting

* For tight loops example

	func main() {
		runtime.GOMAXPROCS(1)

		x := 0
		go func() {
			for {
				x++
			}
		}()

		runtime.Gosched()
	}

.link [runtime: tight loops should be preemptible #10958](https://github.com/golang/go/issues/10958)
.link [runtime: tight loop hangs process completely after some time #15442](https://github.com/golang/go/issues/15442)

* Syscalls are … ?

	> a thread cannot both be executing code and be blocked on a syscall

[[http://morsmachine.dk/go-scheduler][On The Go scheduler by Morsing]]

synchronous.

* Cgo

Вызовы cgo реализованы через поток g0 согласно https://golang.org/src/runtime/cgocall.go

.link https://blog.golang.org/c-go-cgo
.link https://golang.org/cmd/cgo/

Почему?

	> assumed to be an operating system-allocated stack, so safe to run gcc-compiled code on

.link http://blog.altoros.com/golang-internals-part-5-runtime-bootstrap-process.htm
.link https://golang.org/src/runtime/proc.go
.link http://grokbase.com/t/gg/golang-dev/13887fgfn8/what-is-g0 by Dmitry Viukov

	> g0 is a special system goroutine.
	> Each M (thread) has own g0.
	> g0 executes scheduler code. I.e. when a goroutine finishes running,
	> execution is switched to g0, g0 chooses next goroutine to run, and
	> then execution switches to the new goroutine.
	> g0 has relatively large stack (32K) and is intended to never grow it.
	> g0 is also used for split stack management and GC.
	> The other special goroutine is gsignal, it's used for signal handling.


* Go routines exits (runtime.Exit/main, outer exit, no watch)

Как завершится?

	func main() {
		runtime.Goexit()
	}

> fatal error: no goroutines (main called runtime.Goexit) - deadlock!

* Closures out-of-scope var catch

Что выведет?

	func main() {
		for i := 0; i < 10; i++ {
			go func() {
				fmt.Println(i)
			}()


			// defer fmt.Println(i)
		}
		runtime.Gosched()
	}


* Struct{} size and ref

Каков размер struct{}?

	type S struct {
		a int
		b struct{}
	}

	func main() {
		var s S
		fmt.Println(unsafe.Sizeof(struct{}{})) // 0
		fmt.Println(unsafe.Sizeof(s.b)) // 0
		fmt.Println(unsafe.Sizeof(s)) // 16
		fmt.Println(unsafe.Sizeof(&s.b)) // 8
		fmt.Printf("%p", &s) // +0
		fmt.Printf("%p", &s.b) // +8
	}

* Mutability on value types

Что выведет print?

	type S struct {
		a int
	}

	func (s S) inc() {
		s.a++
	}

	func main() {
		s := S{}
		s.inc()
		fmt.Printf("%v", &s)
	}

* Type coercion

Скомпилируется ли код?

	type S struct {
		a int
	}

	func (s S) inc() {
		s.a++
	}

	func (s *S) inc2() {
		s.a++
	}

	func main() {
		s := S{}
		s.inc()
		s.inc2()
	}

* Error interface = nil

Каков вывод?

	type E struct{}

	func (e *E) Error() string {
		return "error"
	}

	func main() {
		var e error
		fmt.Println(e == nil)

		e = nil
		fmt.Println(e == nil)

		e = func() error {
			var x *E // == nil
			return x
		}()
		fmt.Println(e == nil)
	}

* Стив Джобс завещал быть голодными

There is a

[[http://devs.cloudimmunity.com/gotchas-and-common-mistakes-in-go-golang/index.html][50 Shades of Go: Traps, Gotchas, and Common Mistakes for New Golang Devs]]

Oh my gosh, I did not know Go is so bad… and we still successfully using it.


